{
    "naming_convention": {
        "rule": "Use camelCase for variable names",
        "severity": "suggestion",
        "category": "style_guide",
        "examples": [
            "myVariable",
            "priceData",
            "signalStrength",
            "maLengthInput"
        ]
    },
    "constant_naming": {
        "rule": "Use SNAKE_CASE for constants",
        "severity": "suggestion",
        "category": "style_guide",
        "examples": [
            "BULL_COLOR",
            "BEAR_COLOR",
            "MAX_LOOKBACK"
        ]
    },
    "metadata": {
        "source": "Pine Script® Style Guide",
        "extraction_method": "comprehensive_html_parsing",
        "last_updated": "2025-08-16T03:56:43.907Z",
        "total_sections": 18,
        "coverage_improvement": "900% increase",
        "categories": {
            "naming": 1,
            "structure": 10,
            "formatting": 3,
            "types": 1,
            "metadata": 2,
            "general": 1
        }
    },
    "sections": {
        "introduction": {
            "id": "introduction",
            "title": "Introduction",
            "level": 2,
            "description": "This style guide provides recommendations on how to name variables and\n            organize your Pine scripts in a standard way that works well. Scripts\n            that follow our best practices will be easier to read, understand and\n            maintain.",
            "rules": [
                {
                    "text": "This style guide provides recommendations on how to name variables and\n            organize your Pine scripts in a standard way that works well. Scripts\n            that follow our best practices will be easier to read, understand and\n            maintain.",
                    "type": "recommendation",
                    "codeExamples": []
                }
            ],
            "examples": {
                "good": [],
                "bad": [],
                "general": []
            },
            "codeBlocks": [],
            "severity": "warning",
            "category": "general"
        },
        "naming-conventions": {
            "id": "naming-conventions",
            "title": "Naming Conventions",
            "level": 2,
            "description": "We recommend the use of:",
            "rules": [
                {
                    "text": "We recommend the use of:",
                    "type": "recommendation",
                    "codeExamples": []
                },
                {
                    "text": "camelCase for all identifiers, i.e., variable or function names:\n                ma, maFast, maLengthInput, maColor, roundedOHLC(),\n                pivotHi().",
                    "type": "guideline",
                    "codeExamples": [
                        "camelCase",
                        "ma",
                        "maFast",
                        "maLengthInput",
                        "maColor",
                        "roundedOHLC()",
                        "pivotHi()"
                    ]
                },
                {
                    "text": "All caps SNAKE_CASE for constants: BULL_COLOR, BEAR_COLOR,\n                MAX_LOOKBACK.",
                    "type": "guideline",
                    "codeExamples": [
                        "SNAKE_CASE",
                        "BULL_COLOR",
                        "BEAR_COLOR",
                        "MAX_LOOKBACK"
                    ]
                },
                {
                    "text": "The use of qualifying suffixes when it provides valuable clues about\n                the type or provenance of a variable: maShowInput, bearColor,\n                bearColorInput, volumesArray, maPlotID, resultsTable,\n                levelsColorArray.",
                    "type": "guideline",
                    "codeExamples": [
                        "maShowInput",
                        "bearColor",
                        "bearColorInput",
                        "volumesArray",
                        "maPlotID",
                        "resultsTable",
                        "levelsColorArray"
                    ]
                }
            ],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "camelCase",
                    "ma",
                    "maFast",
                    "maLengthInput",
                    "maColor",
                    "roundedOHLC()",
                    "pivotHi()",
                    "SNAKE_CASE",
                    "BULL_COLOR",
                    "BEAR_COLOR",
                    "MAX_LOOKBACK",
                    "maShowInput",
                    "bearColor",
                    "bearColorInput",
                    "volumesArray",
                    "maPlotID",
                    "resultsTable",
                    "levelsColorArray"
                ]
            },
            "codeBlocks": [],
            "severity": "error",
            "category": "naming"
        },
        "script-organization": {
            "id": "script-organization",
            "title": "Script organization",
            "level": 2,
            "description": "The Pine Script® compiler is quite forgiving of the positioning of\n            specific statements or the version\n            compiler annotation in the\n            script. While other arrangements are syntactically\n            correct, this is how we recommend organizing scripts:",
            "rules": [
                {
                    "text": "The Pine Script® compiler is quite forgiving of the positioning of\n            specific statements or the version\n            compiler annotation in the\n            script. While other arrangements are syntactically\n            correct, this is how we recommend organizing scripts:",
                    "type": "recommendation",
                    "codeExamples": []
                }
            ],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "<license><version><declaration_statement><import_statements><constant_declarations><inputs><function_declarations><calculations><strategy_calls><visuals><alerts>"
                ]
            },
            "codeBlocks": [
                {
                    "code": "<license><version><declaration_statement><import_statements><constant_declarations><inputs><function_declarations><calculations><strategy_calls><visuals><alerts>",
                    "language": "pinescript",
                    "type": "example"
                },
                {
                    "code": "<license><version><declaration_statement><import_statements><constant_declarations><inputs><function_declarations><calculations><strategy_calls><visuals><alerts>",
                    "language": "pinescript",
                    "type": "template"
                }
            ],
            "severity": "warning",
            "category": "structure"
        },
        "license": {
            "id": "license",
            "title": "license",
            "level": 3,
            "description": "If you publish your open-source scripts publicly on TradingView (scripts\n            can also be published privately), your open-source code is by default\n            protected by the Mozilla license. You may choose any other license you\n            prefer.",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/// © username"
                ]
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "metadata"
        },
        "version": {
            "id": "version",
            "title": "version",
            "level": 3,
            "description": "This is the\n            compiler annotation defining\n            the version of Pine Script the script will use. If\n            none is present, v1 is used. For v6, use:",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "//@version=6"
                ]
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "metadata"
        },
        "declaration_statement": {
            "id": "declaration_statement",
            "title": "declaration_statement",
            "level": 3,
            "description": "This is the mandatory declaration statement which defines the type of\n            your script. It must be a call to either\n            indicator(),\n            strategy(),\n            or\n            library().",
            "rules": [
                {
                    "text": "This is the mandatory declaration statement which defines the type of\n            your script. It must be a call to either\n            indicator(),\n            strategy(),\n            or\n            library().",
                    "type": "recommendation",
                    "codeExamples": []
                }
            ],
            "examples": {
                "good": [],
                "bad": [],
                "general": []
            },
            "codeBlocks": [],
            "severity": "error",
            "category": "structure"
        },
        "import_statements": {
            "id": "import_statements",
            "title": "import_statements",
            "level": 3,
            "description": "If your script uses one or more Pine Script\n            libraries, your\n            import\n            statements belong here.",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": []
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "structure"
        },
        "constant_declarations": {
            "id": "constant_declarations",
            "title": "constant_declarations",
            "level": 3,
            "description": "Scripts can declare variables qualified as “const”, i.e., ones\n            referencing a constant value.",
            "rules": [
                {
                    "text": "Their declaration uses the optional const keyword (see our User\n                Manual’s section on\n                type qualifiers for more information).",
                    "type": "guideline",
                    "codeExamples": [
                        "const"
                    ]
                },
                {
                    "text": "They are initialized using a literal (e.g., 100 or \"AAPL\") or a\n                built-in qualified as “const” (e.g., color.green).",
                    "type": "guideline",
                    "codeExamples": [
                        "100",
                        "\"AAPL\"",
                        "color.green"
                    ]
                },
                {
                    "text": "Their value does not change during the script’s execution.",
                    "type": "guideline",
                    "codeExamples": []
                },
                {
                    "text": "The RST* and LTF* constants will be used as tuple\n                elements in\n                the options argument of input.*() calls.",
                    "type": "guideline",
                    "codeExamples": [
                        "RST*",
                        "LTF*",
                        "options",
                        "input.*()"
                    ]
                },
                {
                    "text": "The TT_* constants will be used as tooltip arguments in\n                input.*() calls. Note how we use a line continuation for long\n                string literals.",
                    "type": "guideline",
                    "codeExamples": [
                        "TT_*",
                        "tooltip",
                        "input.*()"
                    ]
                },
                {
                    "text": "We do not use\n                var\n                to initialize constants. The Pine Script runtime is optimized to\n                handle declarations on each bar, but using\n                var\n                to initialize a variable only the first time it is declared incurs a\n                minor penalty on script performance because of the maintenance that\n                var\n                variables require on further bars.",
                    "type": "guideline",
                    "codeExamples": []
                },
                {
                    "text": "Literals used in more than one place in a script should always be\n                declared as a constant. Using the constant rather than the literal\n                makes it more readable if it is given a meaningful name, and the\n                practice makes code easier to maintain. Even though the quantity of\n                milliseconds in a day is unlikely to change in the future,\n                MS_IN_DAY is more meaningful than 1000 * 60 * 60 * 24.",
                    "type": "guideline",
                    "codeExamples": [
                        "MS_IN_DAY",
                        "1000 * 60 * 60 * 24"
                    ]
                },
                {
                    "text": "Constants only used in the local block of a function or\n                if,\n                while,\n                etc., statement for example, can be declared in that local block.",
                    "type": "guideline",
                    "codeExamples": []
                }
            ],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "const",
                    "100",
                    "\"AAPL\"",
                    "color.green",
                    "SNAKE_CASE",
                    "// ————— Constantsint     MS_IN_MIN   = 60 * 1000int     MS_IN_HOUR  = MS_IN_MIN  * 60int     MS_IN_DAY   = MS_IN_HOUR * 24color   GRAY        = #808080ffcolor   LIME        = #00FF00ffcolor   MAROON      = #800000ffcolor   ORANGE      = #FF8000ffcolor   PINK        = #FF0080ffcolor   TEAL        = #008080ffcolor   BG_DIV      = color.new(ORANGE, 90)color   BG_RESETS   = color.new(GRAY, 90)string  RST1        = \"No reset; cumulate since the beginning of the chart\"string  RST2        = \"On a stepped higher timeframe (HTF)\"string  RST3        = \"On a fixed HTF\"string  RST4        = \"At a fixed time\"string  RST5        = \"At the beginning of the regular session\"string  RST6        = \"At the first visible chart bar\"string  RST7        = \"Fixed rolling period\"string  LTF1        = \"Least precise, covering many chart bars\"string  LTF2        = \"Less precise, covering some chart bars\"string  LTF3        = \"More precise, covering less chart bars\"string  LTF4        = \"Most precise, 1min intrabars\"string  TT_TOTVOL     = \"The 'Bodies' value is the transparency of the total volume candle bodies. Zero is opaque, 100 is transparent.\"string  TT_RST_HTF    = \"This value is used when '\" + RST3 +\"' is selected.\"string  TT_RST_TIME   = \"These values are used when '\" + RST4 +\"' is selected.  A reset will occur when the time is greater or equal to the bar's open time, and less than its close time.\\nHour: 0-23\\nMinute: 0-59\"string  TT_RST_PERIOD = \"This value is used when '\" + RST7 +\"' is selected.\"",
                    "RST*",
                    "LTF*",
                    "options",
                    "input.*()",
                    "TT_*",
                    "tooltip",
                    "input.*()",
                    "MS_IN_DAY",
                    "1000 * 60 * 60 * 24"
                ]
            },
            "codeBlocks": [],
            "severity": "warning",
            "category": "structure"
        },
        "inputs": {
            "id": "inputs",
            "title": "inputs",
            "level": 3,
            "description": "It is much easier to read scripts when all their inputs are in the\n            same code section. Placing that section at the beginning of the script\n            also reflects how they are processed at runtime, i.e., before the rest\n            of the script is executed.",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "input",
                    "maLengthInput",
                    "bearColorInput",
                    "showAvgInput",
                    "// ————— Inputsstring  resetInput              = input.string(RST2,        \"CVD Resets\",                       inline = \"00\", options = [RST1, RST2, RST3, RST4, RST5, RST6, RST7])string  fixedTfInput            = input.timeframe(\"D\",      \"  Fixed HTF:  \",                   tooltip = TT_RST_HTF)int     hourInput               = input.int(9,              \"  Fixed time hour:  \",             inline = \"01\", minval = 0, maxval = 23)int     minuteInput             = input.int(30,             \"minute\",                           inline = \"01\", minval = 0, maxval = 59, tooltip = TT_RST_TIME)int     fixedPeriodInput        = input.int(20,             \"  Fixed period:  \",                inline = \"02\", minval = 1, tooltip = TT_RST_PERIOD)string  ltfModeInput            = input.string(LTF3,        \"Intrabar precision\",               inline = \"03\", options = [LTF1, LTF2, LTF3, LTF4])"
                ]
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "structure"
        },
        "function_declarations": {
            "id": "function_declarations",
            "title": "function_declarations",
            "level": 3,
            "description": "All user-defined functions must be defined in the script’s global\n            scope; nested function definitions are not allowed in Pine Script.",
            "rules": [
                {
                    "text": "All user-defined functions must be defined in the script’s global\n            scope; nested function definitions are not allowed in Pine Script.",
                    "type": "recommendation",
                    "codeExamples": []
                },
                {
                    "text": "Optimal function design should minimize the use of global variables in\n            the function’s scope, as they undermine function portability. When it\n            can’t be avoided, those functions must follow the global variable\n            declarations in the code, which entails they can’t always be placed in\n            the <function_declarations> section. Such dependencies on global\n            variables should ideally be documented in the function’s comments.",
                    "type": "recommendation",
                    "codeExamples": []
                },
                {
                    "text": "It will also help readers if you document the function’s objective,\n            parameters and result. The same syntax used in\n            libraries can be used to\n            document your functions. This can make it easier to port your functions\n            to a library should you ever decide to do so:",
                    "type": "recommendation",
                    "codeExamples": []
                }
            ],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "//@version=6indicator(\"<function_declarations>\", \"\", true)string SIZE_LARGE  = \"Large\"string SIZE_NORMAL = \"Normal\"string SIZE_SMALL  = \"Small\"string sizeInput = input.string(SIZE_NORMAL, \"Size\", options = [SIZE_LARGE, SIZE_NORMAL, SIZE_SMALL])// @function        Used to produce an argument for the `size` parameter in built-in functions.// @param userSize  (simple string) User-selected size.// @returns         One of the `size.*` built-in constants.// Dependencies     SIZE_LARGE, SIZE_NORMAL, SIZE_SMALLgetSize(simple string userSize) =>    result =       switch userSize        SIZE_LARGE  => size.large        SIZE_NORMAL => size.normal        SIZE_SMALL  => size.small        => size.autoif ta.rising(close, 3)    label.new(bar_index, na, yloc = yloc.abovebar, style = label.style_arrowup, size = getSize(sizeInput))"
                ]
            },
            "codeBlocks": [],
            "severity": "error",
            "category": "structure"
        },
        "calculations": {
            "id": "calculations",
            "title": "calculations",
            "level": 3,
            "description": "This is where the script’s core calculations and logic should be\n            placed. Code can be easier to read when variable declarations are placed\n            near the code segment using the variables. Some programmers prefer to\n            place all their non-constant variable declarations at the beginning of\n            this section, which is not always possible for all variables, as some\n            may require some calculations to have been executed before their\n            declaration.",
            "rules": [
                {
                    "text": "This is where the script’s core calculations and logic should be\n            placed. Code can be easier to read when variable declarations are placed\n            near the code segment using the variables. Some programmers prefer to\n            place all their non-constant variable declarations at the beginning of\n            this section, which is not always possible for all variables, as some\n            may require some calculations to have been executed before their\n            declaration.",
                    "type": "recommendation",
                    "codeExamples": []
                }
            ],
            "examples": {
                "good": [],
                "bad": [],
                "general": []
            },
            "codeBlocks": [],
            "severity": "warning",
            "category": "structure"
        },
        "strategy_calls": {
            "id": "strategy_calls",
            "title": "strategy_calls",
            "level": 3,
            "description": "Strategies are easier to read when strategy calls are grouped in the\n            same section of the script.",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": []
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "structure"
        },
        "visuals": {
            "id": "visuals",
            "title": "visuals",
            "level": 3,
            "description": "This section should ideally include all the statements producing the\n            script’s visuals, whether they be plots, drawings, background colors,\n            candle-plotting, etc. See the Pine Script user manual’s section on\n            Z-index for more\n            information on how the relative depth of visuals is determined.",
            "rules": [
                {
                    "text": "This section should ideally include all the statements producing the\n            script’s visuals, whether they be plots, drawings, background colors,\n            candle-plotting, etc. See the Pine Script user manual’s section on\n            Z-index for more\n            information on how the relative depth of visuals is determined.",
                    "type": "recommendation",
                    "codeExamples": []
                }
            ],
            "examples": {
                "good": [],
                "bad": [],
                "general": []
            },
            "codeBlocks": [],
            "severity": "warning",
            "category": "structure"
        },
        "alerts": {
            "id": "alerts",
            "title": "alerts",
            "level": 3,
            "description": "Alert code will usually require the script’s calculations to have\n            executed before it, so it makes sense to put it at the end of the\n            script.",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": []
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "structure"
        },
        "spacing": {
            "id": "spacing",
            "title": "Spacing",
            "level": 2,
            "description": "A space should be used on both sides of all operators, except unary\n            operators (-1). A space is also recommended after all commas and when\n            using named function arguments, as in plot(series = close):",
            "rules": [
                {
                    "text": "A space should be used on both sides of all operators, except unary\n            operators (-1). A space is also recommended after all commas and when\n            using named function arguments, as in plot(series = close):",
                    "type": "recommendation",
                    "codeExamples": [
                        "-1",
                        "plot(series = close)"
                    ]
                }
            ],
            "examples": {
                "good": [
                    "-1",
                    "plot(series = close)"
                ],
                "bad": [],
                "general": [
                    "int a = close > open ? 1 : -1var int newLen = 2newLen := min(20, newlen + 1)float a = -bfloat c = d > e ? d - e : dint index = bar_index % 2 == 0 ? 1 : 2plot(close, color = color.red)"
                ]
            },
            "codeBlocks": [],
            "severity": "warning",
            "category": "formatting"
        },
        "line-wrapping": {
            "id": "line-wrapping",
            "title": "Line wrapping",
            "level": 2,
            "description": "Line wrapping can make long lines easier to read. Line wraps are defined\n            by using an indentation level that is not a multiple of four, as four\n            spaces or a tab are used to define local blocks. Here we use two spaces:",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "plot(   series = close,   title = \"Close\",   color = color.blue,   show_last = 10 )"
                ]
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "formatting"
        },
        "vertical-alignment": {
            "id": "vertical-alignment",
            "title": "Vertical alignment",
            "level": 2,
            "description": "Vertical alignment using tabs or spaces can be useful in code sections\n            containing many similar lines such as constant declarations or inputs.\n            They can make mass edits much easier using the Pine Editor’s\n            multi-cursor feature (ctrl +\n            alt + 🠅):",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "ctrl",
                    "alt",
                    "🠅",
                    "// Colors used as defaults in inputs.color COLOR_AQUA  = #0080FFffcolor COLOR_BLACK = #000000ffcolor COLOR_BLUE  = #013BCAffcolor COLOR_CORAL = #FF8080ffcolor COLOR_GOLD  = #CCCC00ff"
                ]
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "formatting"
        },
        "explicit-typing": {
            "id": "explicit-typing",
            "title": "Explicit typing",
            "level": 2,
            "description": "Including the type of variables when declaring them is not required.\n            However, it helps make scripts easier to read, navigate, and understand.\n            It can help clarify the expected types at each point in a script’s\n            execution and distinguish a variable’s declaration (using =) from its\n            reassignments (using :=). Using explicit typing can also make scripts\n            easier to debug.",
            "rules": [],
            "examples": {
                "good": [],
                "bad": [],
                "general": [
                    "=",
                    ":="
                ]
            },
            "codeBlocks": [],
            "severity": "suggestion",
            "category": "types"
        }
    }
}
