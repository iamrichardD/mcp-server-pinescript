{
    "version": "1.0.0",
    "description": "Pine Script validation constraints not available in official documentation. These rules are merged during language-reference.json processing to enhance parameter validation.",
    "metadata": {
        "lastUpdated": "2025-08-12",
        "source": "TradingView Pine Script validation requirements",
        "maintainer": "mcp-server-pinescript team"
    },
    "functionValidationRules": {
        "fun_strategy": {
            "argumentConstraints": {
                "shorttitle": {
                    "validation_constraints": {
                        "maxLength": 10,
                        "errorCode": "SHORT_TITLE_TOO_LONG",
                        "errorMessage": "The shorttitle is too long ({length} characters). It should be 10 characters or less.(SHORT_TITLE_TOO_LONG)",
                        "severity": "error",
                        "category": "parameter_validation",
                        "source": "TradingView Pine Script Editor validation"
                    }
                },
                "max_bars_back": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 1,
                        "max": 5000,
                        "errorCode": "INVALID_MAX_BARS_BACK",
                        "errorMessage": "max_bars_back must be between 1 and 5000.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "precision": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 0,
                        "max": 8,
                        "errorCode": "INVALID_PRECISION",
                        "errorMessage": "precision must be between 0 and 8.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "pyramiding": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 0,
                        "errorCode": "INVALID_PYRAMIDING",
                        "errorMessage": "pyramiding must be 0 or greater.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "max_lines_count": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 1,
                        "max": 500,
                        "errorCode": "INVALID_MAX_LINES_COUNT",
                        "errorMessage": "max_lines_count must be between 1 and 500.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "max_labels_count": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 1,
                        "max": 500,
                        "errorCode": "INVALID_MAX_LABELS_COUNT",
                        "errorMessage": "max_labels_count must be between 1 and 500.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "max_boxes_count": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 1,
                        "max": 500,
                        "errorCode": "INVALID_MAX_BOXES_COUNT",
                        "errorMessage": "max_boxes_count must be between 1 and 500.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                }
            }
        },
        "fun_indicator": {
            "argumentConstraints": {
                "shorttitle": {
                    "validation_constraints": {
                        "maxLength": 10,
                        "errorCode": "SHORT_TITLE_TOO_LONG",
                        "errorMessage": "The shorttitle is too long ({length} characters). It should be 10 characters or less.(SHORT_TITLE_TOO_LONG)",
                        "severity": "error",
                        "category": "parameter_validation",
                        "source": "TradingView Pine Script Editor validation"
                    }
                },
                "max_bars_back": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 1,
                        "max": 5000,
                        "errorCode": "INVALID_MAX_BARS_BACK",
                        "errorMessage": "max_bars_back must be between 1 and 5000.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "precision": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 0,
                        "max": 8,
                        "errorCode": "INVALID_PRECISION",
                        "errorMessage": "precision must be between 0 and 8.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "max_lines_count": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 1,
                        "max": 500,
                        "errorCode": "INVALID_MAX_LINES_COUNT",
                        "errorMessage": "max_lines_count must be between 1 and 500.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "max_labels_count": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 1,
                        "max": 500,
                        "errorCode": "INVALID_MAX_LABELS_COUNT",
                        "errorMessage": "max_labels_count must be between 1 and 500.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                },
                "max_boxes_count": {
                    "validation_constraints": {
                        "type": "integer",
                        "min": 1,
                        "max": 500,
                        "errorCode": "INVALID_MAX_BOXES_COUNT",
                        "errorMessage": "max_boxes_count must be between 1 and 500.",
                        "severity": "error",
                        "category": "parameter_validation"
                    }
                }
            }
        }
    },
    "globalValidationRules": {
        "variableNaming": {
            "builtinNamespaceConflict": {
                "validation_constraints": {
                    "reservedNamespaces": [
                        "position", "strategy", "ta", "math", "array", "matrix", "color",
                        "alert", "time", "str", "table", "label", "line", "box", "polyline",
                        "plot", "hline", "input", "barstate", "session", "syminfo",
                        "location", "shape", "size", "scale", "extend", "xloc", "yloc",
                        "order", "bool", "int", "float", "string"
                    ],
                    "errorCode": "INVALID_OBJECT_NAME_BUILTIN",
                    "errorMessage": "Invalid object name: {variableName}. Namespaces of built-ins cannot be used.",
                    "severity": "error",
                    "category": "naming_validation",
                    "source": "Pine Script v6 reserved namespace validation",
                    "pattern": "^[\\s]*(?:var[\\s]+[\\w<>\\.]+[\\s]+|)({reservedNamespace})[\\s]*=",
                    "documentation": "Pine Script reserves certain namespace identifiers for built-in functions and cannot be used as variable names"
                }
            }
        },
        "typeCompatibility": {
            "seriesWhereSimpleExpected": {
                "validation_constraints": {
                    "functions": {
                        "ta.ema": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "length", "type": "simple int", "position": 1 }
                            ]
                        },
                        "ta.macd": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "fastlen", "type": "simple int", "position": 1 },
                                { "name": "slowlen", "type": "simple int", "position": 2 },
                                { "name": "siglen", "type": "simple int", "position": 3 }
                            ]
                        },
                        "ta.sma": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "length", "type": "simple int", "position": 1 }
                            ]
                        },
                        "ta.rma": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "length", "type": "simple int", "position": 1 }
                            ]
                        },
                        "ta.wma": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "length", "type": "simple int", "position": 1 }
                            ]
                        },
                        "ta.vwma": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "length", "type": "simple int", "position": 1 }
                            ]
                        },
                        "ta.atr": {
                            "parameters": [
                                { "name": "length", "type": "simple int", "position": 0 }
                            ]
                        },
                        "ta.rsi": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "length", "type": "simple int", "position": 1 }
                            ]
                        },
                        "ta.stoch": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "high", "type": "series", "position": 1 },
                                { "name": "low", "type": "series", "position": 2 },
                                { "name": "length", "type": "simple int", "position": 3 }
                            ]
                        },
                        "ta.bb": {
                            "parameters": [
                                { "name": "source", "type": "series", "position": 0 },
                                { "name": "length", "type": "simple int", "position": 1 },
                                { "name": "mult", "type": "simple float", "position": 2 }
                            ]
                        },
                        "int": {
                            "parameters": [
                                { "name": "value", "type": "simple", "position": 0 }
                            ]
                        }
                    },
                    "errorCode": "SERIES_TYPE_WHERE_SIMPLE_EXPECTED",
                    "errorMessage": "Cannot call \"{functionName}\" with argument \"{paramName}\"=\"{paramValue}\". An argument of \"series int\" type was used but a \"simple int\" is expected.",
                    "severity": "error",
                    "category": "type_validation",
                    "patterns": {
                        "udtFieldInFunction": "(?:ta\\.(?:ema|macd|sma|rma|wma|vwma|atr|rsi|stoch|bb)|int)\\s*\\([^)]*\\b([a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*)\\b[^)]*\\)",
                        "intCallWithUDTField": "int\\s*\\(\\s*([a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*)\\s*\\)",
                        "macdWithUDTFields": "ta\\.macd\\s*\\([^,]+,\\s*([a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*)[^,]*,\\s*([a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*)[^,]*,\\s*([a-zA-Z_][a-zA-Z0-9_]*\\.[a-zA-Z_][a-zA-Z0-9_]*)"
                    },
                    "documentation": "Detects when user-defined type fields (which become series) are passed to functions expecting simple types. Common with ta.ema, ta.macd length parameters and int() conversions."
                }
            }
        },
        "parameterValidation": {
            "unknownFunctionParameter": {
                "validation_constraints": {
                    "functions": {
                        "strategy.entry": {
                            "validParameters": ["id", "direction", "qty", "limit", "stop", "oca_name", "comment", "when", "alert_message"],
                            "invalidPatterns": ["qty_percent"]
                        }
                    },
                    "errorCode": "UNKNOWN_FUNCTION_PARAMETER",
                    "errorMessage": "The \"{functionName}\" function does not have an argument with the name \"{paramName}\"",
                    "severity": "error",
                    "category": "parameter_validation",
                    "pattern": "strategy\\.entry\\s*\\([^)]*\\bqty_percent\\s*=",
                    "documentation": "Detects incorrect parameter names in function calls"
                }
            }
        },
        "syntaxValidation": {
            "invalidUDTHistoryReference": {
                "validation_constraints": {
                    "errorCode": "INVALID_UDT_HISTORY_REFERENCE",
                    "errorMessage": "Cannot use the history-referencing operator on fields of user-defined types. Reference the history of the object first by enclosing it in parentheses, and then request the field, e.g. \"(object[1]).field\" instead of \"object.field[1]\".",
                    "severity": "error",
                    "category": "syntax_validation",
                    "patterns": {
                        "udtFieldHistoryReference": "\\b([a-zA-Z_][a-zA-Z0-9_]*)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\[(\\d+)\\]",
                        "booleanUDTHistory": "\\b(not\\s+)?([a-zA-Z_][a-zA-Z0-9_]*)\\.([a-zA-Z_][a-zA-Z0-9_]*)\\[(\\d+)\\]"
                    },
                    "correctSyntax": "({objectName}[{historyIndex}]).{fieldName}",
                    "examples": {
                        "incorrect": [
                            "positionState.trailingActive[1]",
                            "market.volatilityRegime[2]",
                            "state.performanceStatus[1]"
                        ],
                        "correct": [
                            "(positionState[1]).trailingActive",
                            "(market[2]).volatilityRegime",
                            "(state[1]).performanceStatus"
                        ]
                    },
                    "documentation": "Detects incorrect syntax for accessing historical values of user-defined type fields. Pine Script v6 requires parentheses around the object access before field access."
                }
            },
            "invalidLineContinuation": {
                "validation_constraints": {
                    "errorCode": "INVALID_LINE_CONTINUATION",
                    "errorMessage": "Syntax error at input 'end of line without line continuation'. Ternary operators (?) must be properly formatted without line breaks at the condition operator.",
                    "severity": "error",
                    "category": "syntax_validation",
                    "patterns": {
                        "ternaryLineContinuation": "([a-zA-Z_][a-zA-Z0-9_]*\\s*=\\s*[^?\\n]*?)\\?\\s*$",
                        "multiLineTernary": "([a-zA-Z_][a-zA-Z0-9_]*\\s*=\\s*[^?\\n]*?)\\?\\s*\\n\\s*\\(",
                        "assignmentLineBreak": "([a-zA-Z_][a-zA-Z0-9_]*\\s*=\\s*[^?\\n]*?)\\?\\s*\\n",
                        "conditionalOperatorEOL": "\\?\\s*$",
                        "ternaryWithNewlineAfterQuestion": "\\?\\s*\\n\\s*\\("
                    },
                    "correctSyntax": "variable = condition ? (nestedCondition ? value1 : value2) : value3",
                    "examples": {
                        "incorrect": [
                            "slowEma = useAdaptiveRibbon ?\n    (highVolRegime ? slowEma55 : slowEma34) : slowEmaBase",
                            "result = condition ?\n    value1 : value2",
                            "color = bullish ?\n    color.green : color.red",
                            "macdLine = useDynamic ?\n    (highVol ? macdHigh : macdNorm) : macdDefault"
                        ],
                        "correct": [
                            "slowEma = useAdaptiveRibbon ? (highVolRegime ? slowEma55 : slowEma34) : slowEmaBase",
                            "result = condition ? value1 : value2",
                            "color = bullish ? color.green : color.red",
                            "macdLine = useDynamic ? (highVol ? macdHigh : macdNorm) : macdDefault"
                        ]
                    },
                    "documentation": "Detects improper line continuation in ternary operators. Pine Script v6 requires ternary operators to be written without line breaks at the ? operator. Multi-line ternary expressions should keep the ? on the same line as the condition."
                }
            }
        }
    },
    "errorCodeDefinitions": {
        "SHORT_TITLE_TOO_LONG": {
            "description": "Function shorttitle parameter exceeds 10 character limit",
            "severity": "error",
            "category": "parameter_validation",
            "documentation": "The shorttitle parameter is displayed in chart legends and must be concise"
        },
        "INVALID_MAX_BARS_BACK": {
            "description": "max_bars_back parameter outside valid range (1-5000)",
            "severity": "error",
            "category": "parameter_validation",
            "documentation": "Controls how far back the script can reference historical data"
        },
        "INVALID_PRECISION": {
            "description": "precision parameter outside valid range (0-8)",
            "severity": "error",
            "category": "parameter_validation",
            "documentation": "Controls decimal places displayed for indicator values"
        },
        "INVALID_PYRAMIDING": {
            "description": "pyramiding parameter must be non-negative",
            "severity": "error",
            "category": "parameter_validation",
            "documentation": "Controls maximum number of entries in same direction"
        },
        "INVALID_MAX_LINES_COUNT": {
            "description": "max_lines_count parameter outside valid range (1-500)",
            "severity": "error",
            "category": "parameter_validation",
            "documentation": "Controls maximum drawing objects to prevent performance issues"
        },
        "INVALID_MAX_LABELS_COUNT": {
            "description": "max_labels_count parameter outside valid range (1-500)",
            "severity": "error",
            "category": "parameter_validation",
            "documentation": "Controls maximum label objects to prevent performance issues"
        },
        "INVALID_MAX_BOXES_COUNT": {
            "description": "max_boxes_count parameter outside valid range (1-500)",
            "severity": "error",
            "category": "parameter_validation",
            "documentation": "Controls maximum box objects to prevent performance issues"
        },
        "INPUT_TYPE_MISMATCH": {
            "description": "Function parameter type does not match expected type",
            "severity": "error",
            "category": "type_validation",
            "documentation": "Pine Script requires specific types for function parameters to ensure correct execution"
        },
        "SYNTAX_COMPATIBILITY_VALIDATION": {
            "description": "Pine Script syntax compatibility issues requiring v6 migration",
            "severity": "error",
            "category": "syntax_compatibility",
            "documentation": "Detects deprecated functions, version compatibility issues, and namespace requirements for Pine Script v6"
        },
        "INVALID_OBJECT_NAME_BUILTIN": {
            "description": "Variable name conflicts with Pine Script built-in namespace",
            "severity": "error",
            "category": "naming_validation",
            "documentation": "Pine Script reserves certain namespace identifiers for built-in functions and constants. These cannot be used as variable names. Examples: position.*, strategy.*, ta.*, math.*, etc.",
            "suggestedFix": "Rename the variable to avoid conflicts with built-in namespaces (e.g., 'position' → 'positionState', 'strategy' → 'strategyName')"
        },
        "SERIES_TYPE_WHERE_SIMPLE_EXPECTED": {
            "description": "Function parameter expects simple type but received series type",
            "severity": "error",
            "category": "type_validation",
            "documentation": "Pine Script functions may require 'simple' type parameters that are constant at compile time, but received 'series' type that can change per bar. CRITICAL: You cannot convert dynamic series values to simple types. If UDT fields are updated dynamically (e.g., in conditional blocks), they remain series and cannot be converted to simple types using int().",
            "examples": {
                "problematic": [
                    "ta.ema(close, market.adaptiveSlowLength)",
                    "ta.macd(close, market.dynamicFast, market.dynamicSlow, market.dynamicSignal)",
                    "int(market.adaptiveSlowLength) // INVALID if adaptiveSlowLength is dynamic"
                ],
                "solutions": [
                    "// Use conditional with fixed simple values:\n// ema34 = ta.ema(close, 34)\n// ema55 = ta.ema(close, 55)\n// result = volatileRegime ? ema55 : ema34",
                    "// Calculate multiple MACD sets with fixed parameters:\n// [fast, sig, hist] = ta.macd(close, 5, 13, 3)\n// [norm, sigN, histN] = ta.macd(close, 8, 21, 5)\n// result = highVol ? fast : norm",
                    "// Use input.int() for truly simple values or conditional selection"
                ]
            },
            "suggestedFix": "CANNOT convert dynamic series to simple types. Use conditional logic with multiple calculations using fixed simple parameters, then select the appropriate result based on conditions."
        },
        "UNKNOWN_FUNCTION_PARAMETER": {
            "description": "Function called with unknown or incorrect parameter name",
            "severity": "error",
            "category": "parameter_validation",
            "documentation": "Function called with a parameter name that doesn't exist in the function signature. Check Pine Script reference for correct parameter names.",
            "suggestedFix": "Check function signature and use correct parameter name (e.g., 'qty_percent' → 'qty' for strategy.entry)"
        },
        "INVALID_UDT_HISTORY_REFERENCE": {
            "description": "Incorrect syntax for accessing history of user-defined type fields",
            "severity": "error",
            "category": "syntax_validation",
            "documentation": "Pine Script v6 requires specific syntax for accessing historical values of user-defined type fields: use (object[1]).field instead of object.field[1]. This error commonly occurs when trying to reference previous values of UDT fields.",
            "examples": {
                "problematic": [
                    "positionState.trailingActive[1]",
                    "not positionState.trailingActive[1]",
                    "market.volatilityRegime[2]"
                ],
                "correct": [
                    "(positionState[1]).trailingActive",
                    "not (positionState[1]).trailingActive",
                    "(market[2]).volatilityRegime"
                ]
            },
            "suggestedFix": "Use correct syntax: (object[historyIndex]).field instead of object.field[historyIndex]"
        },
        "INVALID_LINE_CONTINUATION": {
            "description": "Improper line continuation in ternary operators",
            "severity": "error",
            "category": "syntax_validation",
            "documentation": "Pine Script v6 requires ternary operators to be written without line breaks at the ? operator. This error occurs when a line ends with a ? character followed by a newline, causing 'end of line without line continuation' compilation errors.",
            "examples": {
                "problematic": [
                    "slowEma = useAdaptiveRibbon ?\n    (highVolRegime ? slowEma55 : slowEma34) : slowEmaBase",
                    "result = condition ?\n    value1 : value2",
                    "color = bullish ?\n    color.green : color.red"
                ],
                "correct": [
                    "slowEma = useAdaptiveRibbon ? (highVolRegime ? slowEma55 : slowEma34) : slowEmaBase",
                    "result = condition ? value1 : value2",
                    "color = bullish ? color.green : color.red"
                ]
            },
            "suggestedFix": "Keep ternary operators on a single line or use proper line continuation without breaking at the ? character",
            "relatedErrors": [
                "Syntax error at input 'end of line without line continuation'",
                "Compilation error at line N:M"
            ]
        }
    },
    "processingInstructions": {
        "mergeStrategy": "overlay",
        "description": "During language-reference.json processing, merge validation_constraints into matching function arguments",
        "matchingCriteria": {
            "functionId": "Match by function ID (e.g., 'fun_strategy')",
            "argumentName": "Match by argument name (e.g., 'shorttitle')"
        },
        "outputFormat": {
            "location": "Add 'validation_constraints' field to argument objects",
            "preserve": "Maintain all existing argument properties",
            "fallback": "Skip validation if function/argument not found"
        }
    }
}
